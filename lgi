import tkinter as tk
from tkinter import messagebox
from datetime import datetime

class BelanjaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Aplikasi Belanja")

        # Data
        self.users = {}
        self.current_user = None
        self.belanjaan = {}

        # Login Window
        self.login_window()

    def login_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        self.login_label = tk.Label(self.root, text="Login or Register")
        self.login_label.pack()

        self.username_label = tk.Label(self.root, text="Username:")
        self.username_label.pack()
        self.username_entry = tk.Entry(self.root)
        self.username_entry.pack()

        self.password_label = tk.Label(self.root, text="Password:")
        self.password_label.pack()
        self.password_entry = tk.Entry(self.root, show="*")
        self.password_entry.pack()

        self.login_button = tk.Button(self.root, text="Login", command=self.login)
        self.login_button.pack()

        self.register_button = tk.Button(self.root, text="Register", command=self.register)
        self.register_button.pack()

    def register(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if username in self.users:
            messagebox.showerror("Error", "Username already exists!")
        else:
            self.users[username] = password
            messagebox.showinfo("Success", "Registration successful!")
            self.current_user = username
            self.menu_window()

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if username not in self.users or self.users[username] != password:
            messagebox.showerror("Error", "Invalid credentials!")
        else:
            self.current_user = username
            self.menu_window()

    def menu_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        self.menu_label = tk.Label(self.root, text="Select an option:")
        self.menu_label.pack()

        self.new_list_button = tk.Button(self.root, text="Create New Shopping List", command=self.new_shopping_list)
        self.new_list_button.pack()

        self.old_list_button = tk.Button(self.root, text="View Old Shopping Lists", command=self.view_old_lists)
        self.old_list_button.pack()

    def new_shopping_list(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        self.title_label = tk.Label(self.root, text="Enter Shopping List Title:")
        self.title_label.pack()
        self.title_entry = tk.Entry(self.root)
        self.title_entry.pack()

        self.date_label = tk.Label(self.root, text="Enter Shopping Date (YYYY-MM-DD):")
        self.date_label.pack()
        self.date_entry = tk.Entry(self.root)
        self.date_entry.pack()

        self.next_button = tk.Button(self.root, text="Next", command=self.set_budget)
        self.next_button.pack()

    def set_budget(self):
        self.list_title = self.title_entry.get()
        self.list_date = self.date_entry.get()

        try:
            datetime.strptime(self.list_date, "%Y-%m-%d")
        except ValueError:
            messagebox.showerror("Error", "Invalid date format. Please use YYYY-MM-DD.")
            return

        for widget in self.root.winfo_children():
            widget.destroy()

        self.budget_label = tk.Label(self.root, text="Enter Budget:")
        self.budget_label.pack()
        self.budget_entry = tk.Entry(self.root)
        self.budget_entry.pack()

        self.next_button = tk.Button(self.root, text="Next", command=self.add_items)
        self.next_button.pack()

    def add_items(self):
        try:
            self.budget = float(self.budget_entry.get())
        except ValueError:
            messagebox.showerror("Error", "Invalid budget!")
            return

        self.belanjaan[self.list_title] = {"date": self.list_date, "budget": self.budget, "items": []}

        for widget in self.root.winfo_children():
            widget.destroy()

        self.item_label = tk.Label(self.root, text="Enter Item Name:")
        self.item_label.pack()
        self.item_entry = tk.Entry(self.root)
        self.item_entry.pack()

        self.price_label = tk.Label(self.root, text="Enter Item Price:")
        self.price_label.pack()
        self.price_entry = tk.Entry(self.root)
        self.price_entry.pack()

        self.add_button = tk.Button(self.root, text="Add Item", command=self.add_item)
        self.add_button.pack()

        self.finish_button = tk.Button(self.root, text="Finish", command=self.check_budget)
        self.finish_button.pack()

    def add_item(self):
        item_name = self.item_entry.get()
        try:
            item_price = float(self.price_entry.get())
        except ValueError:
            messagebox.showerror("Error", "Invalid price!")
            return

        if item_name and item_price > 0:
            self.belanjaan[self.list_title]["items"].append((item_name, item_price))
            self.item_entry.delete(0, tk.END)
            self.price_entry.delete(0, tk.END)
        else:
            messagebox.showerror("Error", "Invalid item name or price!")

    def check_budget(self):
        total_cost = sum(item[1] for item in self.belanjaan[self.list_title]["items"])
        remaining_budget = self.belanjaan[self.list_title]["budget"] - total_cost

        for widget in self.root.winfo_children():
            widget.destroy()

        result_label = tk.Label(self.root, text=f"Total Cost: {total_cost}\nRemaining Budget: {remaining_budget}")
        result_label.pack()

        if remaining_budget >= 0:
            self.save_button = tk.Button(self.root, text="Save List", command=self.save_list)
            self.save_button.pack()
        else:
            self.warning_label = tk.Label(self.root, text="Warning: Budget exceeded!")
            self.warning_label.pack()

    def save_list(self):
        if self.current_user not in self.belanjaan:
            self.belanjaan[self.current_user] = []
        self.belanjaan[self.current_user].append(self.belanjaan[self.list_title])
        messagebox.showinfo("Saved", "Shopping list saved successfully!")
        self.menu_window()

    def view_old_lists(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        if self.current_user not in self.belanjaan or not self.belanjaan[self.current_user]:
            messagebox.showinfo("No Lists", "No previous shopping lists found!")
            self.menu_window()
            return

        self.old_lists_label = tk.Label(self.root, text="Your Shopping Lists:")
        self.old_lists_label.pack()

        for list_data in self.belanjaan[self.current_user]:
            list_info = f"{list_data['date']} - {list_data['budget']} - {list_data['items']}"
            list_label = tk.Label(self.root, text=list_info)
            list_label.pack()

        self.menu_button = tk.Button(self.root, text="Back to Menu", command=self.menu_window)
        self.menu_button.pack()

if __name__ == "__main__":
    root = tk.Tk()
    app = BelanjaApp(root)
    root.mainloop()
